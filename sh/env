# -*- mode: sh; -*-

# Shell-independent environment variables.
# This script is POSIX-compatible and can be sourced from any POSIX-compatible shell.

# From bash manual:
# If bash is invoked with the name sh, as an interactive login shell, or as
# a non-interactive shell with the --login option, it first attempts to read
# and execute commands from /etc/profile and ~/.profile, in that order. When
# invoked as an interactive shell with the name sh, Bash looks for the
# variable ENV, expands its value if it is defined, and uses the expanded
# value as the name of a file to read and execute. Since a shell invoked as
# sh does not attempt to read and execute commands from any other startup
# files, the --rcfile option has no effect. A non-interactive shell invoked
# with the name sh does not attempt to read any other startup files.
# Therefore we need to set $ENV so that if you use shell X as your login shell,
# and then start "sh" as a non-login interactive shell the startup scripts will
# correctly run.
export ENV=${HOME}/.config/sh/env

# The XDG_ variables definitions:
# https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html#variables

###############################
# EXPORT ENVIRONMENT VARIABLE #
###############################

## XDG
[[ -z ${XDG_CONFIG_HOME:-} ]] && export XDG_CONFIG_HOME="$HOME/.config"
[[ -z ${XDG_CACHE_HOME:-} ]] && export XDG_CACHE_HOME="$XDG_CONFIG_HOME/cache"
[[ -z ${XDG_DATA_HOME:-} ]] && export XDG_DATA_HOME="$XDG_CONFIG_HOME/local/share"

# source MACOS HISTFILE secrets etc
. "${XDG_CONFIG_HOME}/sh/profile"

# Colourful manpages
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# Set to avoid `env` output from changing console colour
export LESS_TERMEND=$'\E[0m'

# Setup paths
remove_from_path() {
  [ -d "$1" ] || return
  PATHSUB=":$PATH:"
  PATHSUB=${PATHSUB//:$1:/:}
  PATHSUB=${PATHSUB#:}
  PATHSUB=${PATHSUB%:}
  export PATH="$PATHSUB"
}

add_to_path_start() {
  [ -d "$1" ] || return
  remove_from_path "$1"
  export PATH="$1:$PATH"
}

add_to_path_end() {
  [ -d "$1" ] || return
  remove_from_path "$1"
  export PATH="$PATH:$1"
}

force_add_to_path_start() {
  remove_from_path "$1"
  export PATH="$1:$PATH"
}

if [ $MACOS ]
then
  add_to_path_start "/usr/local/sbin"
  add_to_path_start "/usr/local/bin"
  add_to_path_start "/opt/homebrew/bin"
fi
add_to_path_start "${XDG_CONFIG_HOME}/local/bin"

quiet_which() {
  command -v "$1" >/dev/null
}

# Command-specific stuff
if quiet_which brew
then
  eval $(brew shellenv)

  export HOMEBREW_AUTO_UPDATE_SECS=3600
  export HOMEBREW_DEVELOPER=1
  export HOMEBREW_UPDATE_REPORT_ONLY_INSTALLED=1
  export HOMEBREW_GIT_FILTER_TREE_ZERO=1
#  export HOMEBREW_BOOTSNAP=1

fi

if quiet_which diff-so-fancy
then
  # shellcheck disable=SC2016
  export GIT_PAGER='diff-so-fancy | less -+$LESS -RX'
else
  # shellcheck disable=SC2016
  export GIT_PAGER='less -+$LESS -RX'
fi

if quiet_which bat
then
  export BAT_THEME="Dracula"
  alias cat="bat"
  alias batp='bat --paging=always --pager="less -RFX" --style=plain'
fi

if quiet_which prettyping
then
  alias ping="prettyping --nolegend"
fi

if quiet_which htop
then
  alias top="sudo htop"
fi

if quiet_which ncdu
then
  alias du="ncdu --color dark -rr"
fi

if quiet_which rg
then
   rgf() {
      if [ -z "$2" ]
      then
        rg --files | rg "$1"
      else
        rg --files "$2" | rg "$1"
      fi
   }
fi

if quiet_which nvm
then
export NVM_DIR="$HOME/.nvm"
  [ -s "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" ] && . "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" ] && . "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
fi

# Configure environment
export CLICOLOR=1

# editor
export EDITOR="emacs"
export VISUAL="emacs"
export TERM='xterm-256color'

#setup some apps for XDG_CONFIG
# gnupg
export GNUPGHOME="${XDG_CONFIG_HOME}/gnupg"

#  less
#if ! quiet_which bat
#then
  export LESSHISTFILE="${XDG_CONFIG_HOME}/less/history"
  export LESSKEY="${XDG_CONFIG_HOME}/less/keys"
  export LESS='-R'
#export LESSOPEN='|${XDG_CONFIG_HOME}/less/lessfilter'
#fi

# vim
export VIMINIT='let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc" | source $MYVIMRC'
export VIMDOTDIR="$XDG_CONFIG_HOME/vim"

# fzf
if quiet_which fzf
then
  export FZF_DEFAULT_COMMAND="rg --files --hidden --glob '!.git'"
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

# golang
export GOPATH="$HOME/Dev/go"
export GOBIN="$HOME/Dev/go/bin"
export GOCACHE="$XDG_CACHE_HOME/go-build"

# rust
export CARGO_HOME="$XDG_DATA_HOME"/cargo

# git
export GIT_REVIEW_BASE=main # See gitconfig
git_branch() {
  GIT_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null) || return
  [ -n "$GIT_BRANCH" ] && echo "($GIT_BRANCH) "
}

# ssh-agent
[ -z "$SSH_AUTH_SOCK" ] && eval "$(ssh-agent -s)"
# Save directory changes
cd() {
  builtin cd "$@" || return
  [ "$TERMINALAPP" ] && command -v set_terminal_app_pwd >/dev/null \
    && set_terminal_app_pwd
  pwd > "$HOME/.lastpwd"
  ls
}

# Pretty-print JSON files
if quiet_which jq
then
  json() {
    [ -n "$1" ] || return
    cat "$1" | jq .
  }
fi


# Lua related stuff
if quiet_which luarocks
then
   eval "$(luarocks path)"

    for path in "$HOME"/.local/share/lua/*; do
        LUA_PATH="$path/?.lua;$LUA_PATH"
     done

   export LUA_PATH
fi

# conda setup
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('$HOMEBREW_PREFIX/Caskroom/miniforge/base/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$HOMEBREW_PREFIX/Caskroom/miniforge/base/etc/profile.d/conda.sh" ]; then
        . "$HOMEBREW_PREFIX/Caskroom/miniforge/base/etc/profile.d/conda.sh"
    else
        export PATH="$HOMEBREW_PREFIX/Caskroom/miniforge/base/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

add_to_path_start "${GOCACHE}"
add_to_path_start "${GOBIN}"
add_to_path_start "${GOPATH}"
