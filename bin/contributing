#!/usr/bin/env bash

project=$(basename "$PWD")
file=CONTRIBUTING.org
readme_file=README.org

message=$(echo "Everyone is welcome to contribute to =$project= project. Feature
requests, proposals, issue reports, documentation improvements, code patches -
just to name few things that the project can gain from.

Please note that the main upstream of =$project= is located on
[[https://gitlab.com/d12frosted/$project][GitLab]], and it's advisable to send
your contributions there. But they can be accepted also via
[[mailto:boris@d12frosted.io][email]] and
[[https://github.com/d12frosted/$project][GitHub]].")

if [ -f .gitlab-ci.yml ]; then
  message=$(echo "$message

This project has automated tests that are run on
[[https://gitlab.com/d12frosted/$project][GitLab]]. If you are contributing
outside of GitLab, please run the tests manually. For more information please
refer to relevant section in readme file or contact me via email.")

fi

message=$(echo "$message

Happy hacking!")

echo "#+STARTUP: showall

* Contributing

$message" > $file

emacs \
  -nw \
  --eval "(progn
            (find-file \"$file\")
            (sit-for 0.1)
            (ignore-errors (call-interactively #'org-show-subtree))
            (sit-for 0.1)
            (while (not (eobp))
              (sit-for 0.1)
              (org-forward-paragraph)
              (org-fill-paragraph))
            (save-buffer)
            (kill-emacs))"

emacs \
  -nw \
  --eval "(progn
            (find-file \"$readme_file\")
            (sit-for 0.1)
            (ignore-errors (call-interactively #'org-show-subtree))
            (sit-for 0.1)
            (if-let*
                  ((items (imenu--make-index-alist t))
                   (items (delete (assoc \"*Rescan*\" items) items))
                   (target (seq-find
                            (lambda (x)
                              (string-match-p (regexp-quote \"contributing\")
                                              (cond ((consp x) (car x))
                                                    ((stringp x) x))))
                            (car items))))
                (progn
                  (imenu target)
                  (sit-for 0.1)
                  (call-interactively #'org-cut-subtree))
                (end-of-buffer))
              (sit-for 0.1)
              (insert \"** Contributing\\n\\n\")
              (insert \"$message\")
              (sit-for 0.1)
              (org-previous-visible-heading 1)
              (while (not (eobp))
                (sit-for 0.1)
                (org-forward-paragraph)
                (org-fill-paragraph))
              (save-buffer)
              (kill-emacs))"
