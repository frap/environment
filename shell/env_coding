# -*- mode: sh; -*-

# Setup some apps for XDG_CONFIG
# +-------------+
# |   GNUPG     |
# +-------------+
if quiet_which gpg; then
    export GNUPGHOME=${XDG_CONFIG_HOME}/gnupg
fi

# +-------------+
# |    LESS     |
# +-------------+
if quiet_which bat; then
    export LESSHISTFILE="${XDG_CONFIG_HOME}/less/history"
    #    export LESSKEY="${XDG_CONFIG_HOME}/less/keys"
    export LESS='-RFX' # -R allows colours -F like tail -X leaves on screen
    export LESSOPEN='| bat %s'
fi

# +-------------+
# |    EMACS    |
# +-------------+
if quiet_which emacs; then
    function em() {
        if [ -z "$DISPLAY" ]; then
            emacsclient -nw -a "" "$@"
        else
            emacsclient -n -e "(> (length (frame-list)) 1)" | grep t
            if [ "$?" = "1" ]; then
                emacsclient -c -n -a "" "$@"
            else
                emacsclient -n -a "" "$@"
            fi
        fi
    }
    function ec() {
        CFLAG=""
        [[ -z "$@" ]] && CFLAG="--create-frame"
        emacsclient $CFLAG --alternate-editor=emacs --no-wait "$@"
    }
    export EDITOR=emacs
    export VISUAL="${EDITOR}"
    export ALTERNATE_EDITOR="vim"
    function aws_envs() {
        fn=tempfile
        echo "Updating AWS ENVs"
        env | grep "AWS" >"$fn"
        echo "$fn"
        emacsclient -nw -e '(update-aws-envs "'"$fn"'")' "$@" >/dev/null
    }
else
    export EDITOR="vim"
fi

# +-------------+
# |    VIM      |
# +-------------+
if quiet_which vim; then
    export VIMINIT='let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc" | source $MYVIMRC'
    export VIMDOTDIR="$XDG_CONFIG_HOME/vim"
fi

# git
# export GIT_REVIEW_BASE=master # See gitconfig
# git_branch() {
#   GIT_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null) || return
#   [ -n "$GIT_BRANCH" ] && echo "($GIT_BRANCH) "
# }

# +-----+
# | GO  |
# +-----+
if quiet_which go; then
    export GOPATH="$HOME/Dev/go"
    export GOBIN="$HOME/Dev/go/bin"
    export GOCACHE="$XDG_CACHE_HOME/go-build"
    prepend_to_path "${GOCACHE}"
    prepend_to_path "${GOBIN}"
    prepend_to_path "${GOPATH}"
fi

# +-------------+
# |    RUST     |
# +-------------+
if quiet_which rust; then
    export RUSTUP_HOME="$XDG_CONFIG_HOME/rustup"
    export CARGO_HOME="$XDG_DATA_HOME/cargo"
    prepend_to_path "${CARGO_HOME}/bin"
fi

# +-----+
# | FZF |
# +-----+
if dir_exists "${HOMEBREW_PREFIX}/opt/fzf/bin" && [ ! "$ESHELL" ]; then
    export FZF_DEFAULT_COMMAND="rg --files --hidden --glob '!.git'"
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    #Load up auto completion for fzf
    append_to_path "${HOMEBREW_PREFIX}/opt/fzf/bin"

fi

# +-------------+
# |  RIPGREP    |
# +-------------+
if quiet_which rg; then
    rgf() {
        if [ -z "$2" ]; then
            rg --files | rg "$1"
        else
            rg --files "$2" | rg "$1"
        fi
    }
fi

# +-------------+
# |    JSON     |
# +-------------+
if quiet_which jq; then
    json() {
        [ -n "$1" ] || return
        cat "$1" | jq .
    }
fi

# +-------------+
# |    NODE     |
# +-------------+
export NVM_DIR="${XDG_CACHE_HOME}/nvm"
if [ $MACOS ]; then
    ssource "${HOMEBREW_PREFIX}/opt/nvm/nvm.sh" # This loads nvm
    ssource "${HOMEBREW_PREFIX}/opt/nvm/etc/bash_completion.d/nvm"
fi

# +-------------+
# |    JAVA     |
# +-------------+
if quiet_which jenv; then
    force_append_to_path "$XDG_CACHE_HOME/.jenv/bin"
    eval "$(jenv init -)"
fi

# +-------------+
# |    LUA      |
# +-------------+
if quiet_which luarocks; then
    eval "$(luarocks path)"

    #  for path in "$XDG_DATA_HOME"/lua/*; do
    #      LUA_PATH="$path/?.lua;$LUA_PATH"
    #   done

    # export LUA_PATH
fi

# +-------------+
# |   PYTHON    |
# +-------------+
export PYENV_ROOT="$XDG_CACHE_HOME/pyenv"
[[ -d $PYENV_ROOT/bin ]] && append_to_path "$PYENV_ROOT/bin"
eval "$(pyenv init -)"

# +-------------+
# |  BABASHKA   |
# +-------------+
append_to_path "$XDG_DATA_HOME/.babashka/bbin/bin"

# +-------------+
# |    MAKE     |
# +-------------+
if [ "$CPUCOUNT" -gt 1 ]; then
    export MAKEFLAGS="-j$CPUCOUNT"
    export BUNDLE_JOBS="$CPUCOUNT"
fi
