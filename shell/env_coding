# -*- mode: sh; -*-
# +-------------+
# |    GCC      |
# +-------------+
export LIBRARY_PATH="/opt/homebrew/lib:/opt/homebrew/opt/gcc/lib/gcc/current:$LIBRARY_PATH"

# Setup some apps for XDG_CONFIG
# +-------------+
# |   GNUPG     |
# +-------------+
if cmd_exists gpg; then
    export GNUPGHOME=${XDG_CONFIG_HOME}/gnupg
fi

# +-------------+
# |    LESS     |
# +-------------+
#   From [[http://funkworks.blogspot.com/2013/01/syntax-highlighting-in-less-on-osx.html][this blog entry]], comes details how to install the
#   =source-highlight= program on the Mac in order to see various code
#   highlighted in pretty colors.

LESSPIPE=$(which src-hilite-lesspipe.sh)
export LESSOPEN="| ${LESSPIPE} %s"
export LESSHISTFILE="${XDG_CONFIG_HOME}/less/history"
export LESS='-SXIFRs' # -S chop lines left-right arrows -R colours -F like tail -X leaves on screen
alias less='less -m -N -g -i -J --underline-special --SILENT'

# +-------------+
# |    EMACS    |
# +-------------+
if cmd_exists emacs; then
    function em() {
        if [[ -z "$DISPLAY" ]]; then
            emacsclient -nw -a "" "$@"
        else
            emacsclient -n -e "(> (length (frame-list)) 1)" | grep t
            if [[ "$?" = "1" ]]; then
                emacsclient -c -n -a "emacs" "$@"
            else
                emacsclient -r -n -a "emacs" "$@"
            fi
        fi
    }

    emacs() { emacsclient -a 'emacs' -n "$@" 2>/dev/null || command emacs; }
    alias m='emacsclient --eval "(progn (magit-status) (delete-other-windows))"'
    alias mt="m -t"
    alias et="e -t"

    export EDITOR=em
    export VISUAL="${EDITOR}"
    function aws_envs() {
        fn=tempfile
        echo "Updating AWS ENVs"
        env | grep "AWS" >"$fn"
        echo "$fn"
        emacsclient -nw -e '(update-aws-envs "'"$fn"'")' "$@" >/dev/null
    }
else
    export EDITOR="vim"
    export VISUAL=$EDITOR
fi

# +-------------+
# |    VIM      |
# +-------------+
if cmd_exists vim; then
    export VIMDOTDIR="$XDG_CONFIG_HOME/vim"
    export VIMINIT='let $MYVIMRC="$VIMDOTDIR/vimrc" | source $MYVIMRC'
fi


# +-----+
# | GO  |
# +-----+
if cmd_exists go; then
    export GOPATH="$HOME/Dev/go"
    export GOBIN="$HOME/Dev/go/bin"
    export GOCACHE="$XDG_CACHE_HOME/go-build"
    prepend_to_path "${GOCACHE}"
    prepend_to_path "${GOBIN}"
    prepend_to_path "${GOPATH}"
fi

# +-------------+
# |    RUST     |
# +-------------+
if cmd_exists rust; then
    export RUSTUP_HOME="$XDG_CONFIG_HOME/rustup"
    export CARGO_HOME="$XDG_DATA_HOME/cargo"
    prepend_to_path "${CARGO_HOME}/bin"
fi

# +-----+
# | FZF |
# +-----+
if [ -z "$INSIDE_EMACS" ] && dir_exists "${HOMEBREW_PREFIX}/opt/fzf/bin"; then
   # echo "in: setting up fzf"
    export FZF_DEFAULT_COMMAND="rg --files --hidden --glob '!.git'"
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    #Load up auto completion for fzf
    ssource "${HOMEBREW_PREFIX}/opt/fzf/shell/completion.bash"
    append_to_path "${HOMEBREW_PREFIX}/opt/fzf/bin"
    # fzf-git fails badly the shell!!
    #ssource "${XDG_CONFIG_HOME}/fzf-git.sh/fzf-git.sh"

fi

# +-------------+
# |  RIPGREP    |
# +-------------+
if cmd_exists rg; then
    rgf() {
        if [ -z "$2" ]; then
            rg --files | rg "$1"
        else
            rg --files "$2" | rg "$1"
        fi
    }
fi

# +-------------+
# |    JSON     |
# +-------------+
if cmd_exists jq; then
    json() {
        [ -n "$1" ] || return
        cat "$1" | jq .
    }
fi

# +-------------+
# |    NODE     |
# +-------------+
export NVM_DIR="${XDG_CACHE_HOME}/nvm"
if [[ -n "$MACOS" ]]; then
    ssource "${HOMEBREW_PREFIX}/opt/nvm/nvm.sh" # This loads nvm
    ssource "${HOMEBREW_PREFIX}/opt/nvm/etc/bash_completion.d/nvm"
fi

# +-------------+
# |    JAVA     |
# +-------------+
if cmd_exists jenv; then
    force_append_to_path "$XDG_CACHE_HOME/.jenv/bin"
    eval "$(jenv init -)"
fi

# +-------------+
# |    LUA      |
# +-------------+
if cmd_exists luarocks; then
    eval "$(luarocks path)"

    #  for path in "$XDG_DATA_HOME"/lua/*; do
    #      LUA_PATH="$path/?.lua;$LUA_PATH"
    #   done

    # export LUA_PATH
fi

# +-------------+
# |   PYTHON    |
# +-------------+



# +-------------+
# |  BABASHKA   |
# +-------------+
append_to_path "$XDG_DATA_HOME/.babashka/bbin/bin"

if [[ "$SHELL" == */bash ]]; then
    if [ -f $(brew --prefix)/etc/bash_completion ]; then
        . $(brew --prefix)/etc/bash_completion
    fi
fi

# +-------------+
# |   DIRENV    |
# +-------------+
if [[ "$SHELL" == */bash ]]; then
    cmd_exists direnv && eval "$(direnv hook bash)"
    ssource "/opt/homebrew/etc/profile.d/bash_completion.sh"
else
    cmd_exists direnv && eval "$(direnv hook zsh)"
fi
# +-------------+
# |    MAKE     |
# +-------------+
if [[ "$CPUCOUNT" -gt 1 ]]; then
    export MAKEFLAGS="-j$CPUCOUNT"
    export BUNDLE_JOBS="$CPUCOUNT"
fi

# +-------------+
# |  GITHUB     |
# +-------------+
cmd_exists gh && export GITHUB_AUTH="$(gh auth token)"

# +-------------+
# |   TROVE     |
# +-------------+
trove-ca-login() {
    python3 $HOME/work/tempo/trove-scripts/codeartifact/codeartifact_auth.py
}
