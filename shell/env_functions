# Usage: indirect_expand PATH -> $PATH
function indirect_expand() {
	env | sed -n "s/^$1=//p"
}

# Usage: pathremove /path/to/bin [PATH]
# Eg, to remove ~/bin from $PATH
#     pathremove ~/bin PATH
function pathremove() {
	local IFS=':'
	local newpath
	local dir
	local var=${2:-PATH}
	# Bash has ${!var}, but this is not portable.
	for dir in $(indirect_expand "$var"); do
		IFS=''
		if [ "$dir" != "$1" ]; then
			newpath=$newpath:$dir
		fi
	done
	export $var=${newpath#:}
}

# Usage: pathprepend /path/to/bin [PATH]
# Eg, to prepend ~/bin to $PATH
#     pathprepend ~/bin PATH
function pathprepend() {
	# if the path is already in the variable,
	# remove it so we can move it to the front
	pathremove "$1" "$2"
	#[ -d "${1}" ] || return
	local var="${2:-PATH}"
	local value=$(indirect_expand "$var")
	export ${var}="${1}${value:+:${value}}"
}

# Usage: pathappend /path/to/bin [PATH]
# Eg, to append ~/bin to $PATH
#     pathappend ~/bin PATH
function pathappend() {
	pathremove "${1}" "${2}"
	#[ -d "${1}" ] || return
	local var=${2:-PATH}
	local value=$(indirect_expand "$var")
	export $var="${value:+${value}:}${1}"
}

#
# dir/file Tests

function is_file() {
	local file=$1

	[[ -f $file ]]
}

function exists() {
	local file=$1

	test -e $1
}

function is_dir() {
	local dir=$1

	[[ -d $dir ]]
}

# Usage: ssource filename
function ssource() {
	if [ -r "$1" ]; then
		. "$1"
	fi
}

# Usage: command_exists starship
function command_exists() {
	hash $1 &>/dev/null
}

# OS detection
KERNEL_NAME=$(uname -s | tr '[:upper:]' '[:lower:]')
function is_osx() {
	[[ "$OSTYPE" =~ ^darwin ]] 2>/dev/null || return 1
}

function is_linux() {
	[[ "KERNEL_NAME" =~ ^linux ]] 2>/dev/null || return 1
}

function is_ubuntu() {
	[[ "$(cat /etc/issue 2>/dev/null)" =~ Ubuntu ]] || return 1
}

function is_bastion() {
	exists /etc/bastion || return 1
}
